{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Lucy's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Creating Your First Project with Go!","text":"<ul> <li> <p>Primary Author: Lucy Good</p> </li> <li> <p>Reviewer: Maddie Clark</p> </li> </ul>"},{"location":"tutorials/go-setup/#step-1-getting-started","title":"Step 1: Getting Started","text":"<p>During this tutorial, you will create your first project using Go! In this tutorial you will learn how to:</p> <ol> <li>Create and initialize a Git repository for your project</li> <li>Set up a Development Container in VSCode</li> <li>Create your first \"Hello COMP423\" program using Go</li> </ol>"},{"location":"tutorials/go-setup/#before-you-begin","title":"Before You Begin","text":"<ol> <li>Ensure that you have Git installed on your computer.</li> <li>Ensure that you have VSCode installed on your computer.</li> <li>Ensure that you have Docker installed on your computer.</li> <li>Get excited because you are about to learn some major knowledge.</li> </ol>"},{"location":"tutorials/go-setup/#step-2-creating-and-initializing-your-project-repository","title":"Step 2: Creating and Initializing your Project Repository","text":"<ol> <li>Open your Terminal.</li> <li>Navigate to the file folder on your computer where you would like this project to be stored.</li> <li>Create a new directory.    <pre><code>mkdir first-go-project\ncd first-go-project\n</code></pre></li> <li>Initialize your new directory as a Git repository.    <pre><code>git init\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-3-starting-your-dev-container-in-vscode","title":"Step 3: Starting Your Dev Container in VSCode","text":"<ol> <li>Open VSCode on your computer.</li> <li>In your computer's menu: File -&gt; Open</li> <li>In VSCode: Click Show Local and navigate to the <code>first-go-project</code> repository you initiated in Step 1.</li> <li>Install Microsoft's Dev Containers extension on the Extensions tab of VSCode's side bar.</li> <li>In the root of your project directory, create a folder called <code>.devcontainer</code>.</li> <li>In this folder create a file called <code>.devcontainer.json</code>.</li> <li> <p>In this new file add the following code:      dev-setup.json<pre><code>    {\n        \"name\": \"Go Development Environment\",\n        \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n        \"customizations\": {\n            \"vscode\": {\n                \"extensions\": [\n                    \"ms-vscode.go\"\n                 ]\n            }\n        }\n    }\n</code></pre></p> <p>Explaining .devcontainer.json</p> <ul> <li>name: Choose a name for your development environment. Ensure that it is recognizeable and unique.</li> <li>image: <code>mcr.microsoft.com/devcontainers/go:latest</code> is Microsoft's official replica of the exact development environment required for Docker.</li> <li>customizations.vscode.extensions: This VSCode extensions will help with development.</li> </ul> </li> <li> <p>Open the Command Palette in VSCode with <code>Cmd + Shift + P</code> and enter Dev Containers: Reopen in Container. This may take a few moments, so be patient.</p> </li> <li>Once the setup completes and you see your Container running in the bottom left corner of VSCode, open a new Terminal in VSCode and run <code>go version</code>. As of August, 2024, the most recent version of Go is <code>1.23.0</code>.</li> </ol>"},{"location":"tutorials/go-setup/#step-4-writing-your-first-program-using-go","title":"Step 4: Writing Your First Program using Go","text":"<p> Warning: Before proceeding, ensure you are running your project directory in the Dev Container in VSCode.</p>"},{"location":"tutorials/go-setup/#initializing-a-go-module-and-writing-your-hello-comp423-program","title":"Initializing a Go Module and Writing Your Hello COMP423 Program","text":"<ol> <li>Open a new Terminal in VSCode.</li> <li> <p>Run <code>go mod init first-go-project</code>.</p> What's happening here? <p>A Go Module is a collection of Go packages that share dependencies. The command you just ran  creates a <code>go.mod</code> module file in your project directory, which specifies the libraries and dependencies the module needs. Without a module, managing dependency versions would become very convoluted, so this modulation process is incredible important for ensuring reproducibility in the future.</p> </li> <li> <p>Next, run <code>touch main.go</code> in your Terminal.</p> What's happening here? <p>The <code>touch</code> command will create a new file called <code>main.go</code> in your project directory.</p> </li> <li> <p>Open <code>main.go</code> in VSCode.</p> </li> <li> <p>Add the following code:     hello-comp423<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre></p> What's happening here <ul> <li><code>package main</code> establishes the entry point of your program.</li> <li>Importing the <code>fmt</code> package allows for the use of formatted input/output functions such as <code>Println</code>.</li> </ul> </li> </ol> <p>Now, let's run your program. There are two ways to do this:</p>"},{"location":"tutorials/go-setup/#running-your-program","title":"Running Your Program","text":""},{"location":"tutorials/go-setup/#without-building","title":"Without Building","text":"<p>To immediately compile and execute your program into a temporary binary without saving it to your disk, run the following command in your terminal:     <pre><code>go run main.go\n</code></pre> Output:     <pre><code>Hello COMP423!\n</code></pre></p>"},{"location":"tutorials/go-setup/#with-building","title":"With Building","text":"<ol> <li> <p>To compile your program into an executable binary file, run this command in your Terminal:     <pre><code>go build main.go\n</code></pre></p> <p>Note</p> <p>This creates a binary file named <code>main</code> in your current directory. </p> </li> <li> <p>To run your newly created binary file, simply run this command in your Terminal:     <pre><code>./main\n</code></pre>     Output:     <pre><code>Hello COMP423!\n</code></pre></p> </li> <li>(Optional) Deleting old/extra binary files: run <code>rm main</code> in your Terminal.</li> </ol>"},{"location":"tutorials/go-setup/#whats-the-difference","title":"What's the Difference?","text":"<ul> <li><code>go run</code> is able to compile and execute code in one step. It is used for quick testing.</li> <li><code>go build</code> is compiled once and is able to be ran multiple times without re-compiling.</li> </ul>"},{"location":"tutorials/go-setup/#remember-what-you-learned-in-comp211","title":"Remember what you learned in COMP211?","text":"<p>The <code>gcc</code> command: <pre><code>    gcc -o hello hello.c\n</code></pre> compiles <code>hello.c</code> into an executable binary file called <code>hello</code>. This functionality is very similar to <code>go build</code>. The only difference: <code>gcc</code> does not have an equivalent of <code>go run</code> that compiles and executes in the same step. </p> <p>Congratulations! You have written your very first Go program in a Dev Container that you created! Woohoo!!</p>"}]}